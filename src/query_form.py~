import data_parser as dp
import operator


def main():
    print 'Reading Table....'

    total_ls = dp.getTable()

    print 'Table Read....'

    while(True):
        print 'Enter Query...'
        query = raw_input()
        execute(total_ls, query)

def execute(table, query_str):
    if(query_str == ''):
        return

    tokens = query_str.split()
    command = tokens[0]

    if(command == 'printcr'):
        printcr(table, tokens[1])
    elif(command == 'printcrs'):
        for x in xrange(1, len(tokens)):
            printcr(table, tokens[x])
    elif(command == 'compcrs'):
        compcrs(table, tokens[1], tokens[2])
    elif(command == 'highest'):
        highest(table, tokens[1], tokens[2])
    elif(command == 'lowest'):
        lowest(table, tokens[1], tokens[2])
    elif(command == 'lsa'):
        print_inci_st(table)
    elif(command == 'iprint'):
        print_cooc(table, tokens[1])
    elif(command == 'across'):
        comp_across(table, tokens[1])
    elif(command == 'q'):
        'Quitting...'
        return
    else:
        print 'Command not found!'


#Prints the information profile for a crossing
def printcr(table, crossingID):
    crossing_ls = table[0]

    if crossingID in crossing_ls:
        print crossing_ls[crossingID].get_values()
    else:
        print 'Entry not found!'
        
#Prints two crossings side by side
def compcrs(table, crossingOne, crossingTwo, diff=True):
    crossing_ls = table[0]

    for field_name in crossing_ls[crossingOne].get_values().field_names:
        color = '\033[94m'
        if diff == True and str(crossing_ls[crossingOne].get_values()[field_name]) != str(crossing_ls[crossingTwo].get_values()[field_name]):
            color = '\033[92m' 

        print color + field_name + ' | ' + crossingOne + ' : '+ str(crossing_ls[crossingOne].get_values()[field_name]) + " ::: " + crossingTwo + ' : ' + str(crossing_ls[crossingTwo].get_values()[field_name])
        

def print_cooc(table, crossing_str):
    crossing_dic = table[0]
    crossing = crossing_dic[crossing_str]

    inci_ls = crossing.get_inci()
    
    final_dic = dict()

    for inci in inci_ls:
        inci_dic = inci.get_dict()
        
        for i_key, i_value in inci_dic.iteritems():
            item = str(i_key) + " ::: " +  str(i_value)
            if item in final_dic:
                final_dic[item] += 1
            else:
                final_dic[item] = 1

    sorted_ls = sorted(final_dic.items(), key=operator.itemgetter(1))
    for item in sorted_ls:
        print item

    return sorted_ls


def comp_across(table, key_str):
    crossing_dic = table[0]
    crossing_ls = crossing_dic.values()

    for crossing in crossing_ls:
        incv_ls = print_cooc(table, crossing.get_value('crossing'))
        for item in incv_ls:
            items = item.itemgetter(0).split()
            if(items[0] == key_str):
                print item




#Prints the x highest values of an attribute and the crossings they belong to

#Prints the x lowest values of an attribute and the crossings they belong to

def print_inci_st(table):
    crossing_dic = table[0]
    ls = crossing_dic.values()

    sorted_dic = sorted(ls, key=lambda item: len(item.get_inci()), reverse=False)

    for value in sorted_dic:
        inci_ls = value.get_inci()
        print 'Incident at ' + str(value.get_value('crossing')) + ' with num: ' + str(len(inci_ls))



if __name__=="__main__":
    main()
